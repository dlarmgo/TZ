
@page "/tetrisMain"
@using Microsoft.Extensions.Logging;
@using System.Collections.Generic;
@using TZ.Model;
@using TZ.Data;
@using System.Threading;
@inject NotifierService Notifier
@implements IDisposable

<div @onkeydown="keyPressed">
    <button id="testTickingBtn" @onclick="testTicking">Test Ticking</button>
    <button id="moveLeftBtn" @onclick="moveLeft">moveLeft</button>
    <button id="moveBottomBtn" @onclick="moveBottom">moveBottom</button>
    <button id="moveRightBtn" @onclick="moveRight">moveRight</button>
    <button id="rotateBtn" @onclick="rotate">Rotate</button>

    <div>
        <h2>Current score: @homeTetris.score, Level: @homeTetris.level</h2>
    </div>

    <table>
        @for (int y = homeTetris.board.height - 1; y >= 0; y--)
        {
            <tr>
                @for (int x = 0; x < homeTetris.board.width; x++)
                {
                    <td>
                        @if (homeTetris.board.matrix[x, y] == true)
                        {
                            <div id="el_{x}_{y}" style="background: @homeTetris.board.color[x, y]; font-family: monospace;width:20px;height:20px;text-align:center">.</div>
                        }
                        else
                        {
                            var el = homeTetris.currentFigure;
                            int el_x = el.state.currentState.matrix.GetLength(0) + el.anchor.X;
                            int el_y = el.state.currentState.matrix.GetLength(1) + el.anchor.Y;
                            @if (x >= el.anchor.X && x < el_x && y >= el.anchor.Y && y < el_y && el.state.currentState.matrix[x - el.anchor.X, y - el.anchor.Y] == true)
                            {
                                <div id="el_{x}_{y}" style="background: @el.color; font-family: monospace;width:20px;height:20px;text-align:center">.</div>
                            }
                            else
                            {
                                <div id="el_{x}_{y}" style="background:white;width:20px;height:20px;text-align:center">.</div>
                            }
                        }
                    </td>
                }


            </tr>
        }
    </table>
</div>



@code {
    private static readonly ILogger _logger = Program.LF.CreateLogger("TetrisMain");

    public TZ.Model.Tetris homeTetris = new Tetris();
    public static string color = "black";

    public void keyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "ArrowLeft")
        {
            homeTetris.DoMotion(MotionSide.Left);
        }
        if (args.Key == "ArrowRight")
        {
            homeTetris.DoMotion(MotionSide.Right);
        }
        if (args.Key == "ArrowDown")
        {
            homeTetris.DoMotion(MotionSide.Bottom);
        }
        if (args.Key == "ArrowUp")
        {
            homeTetris.DoMotion(MotionSide.Rotate);
        }

    }





    protected override void OnInitialized()
    {
        Notifier.Notify += OnNotify;
    }
    public async Task OnNotify(Tetris tetris)
    {
        await InvokeAsync(() =>
        {
            homeTetris = tetris;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }

    public async void ticking()
    {
        while (true)
        {
            Thread.Sleep(1000 - homeTetris.level * 50);
            homeTetris.DoMotion(MotionSide.Bottom);
            await OnNotify(homeTetris);
        }

    }
    public Thread _thread;


    public void testTicking()
    {
        _thread = new Thread(ticking);
        _thread.Start();

    }






    public static void KeyPressed()
    {
        _logger.LogInformation($"Key has been pressed!");

    }



    public void moveLeft()
    {
        homeTetris.DoMotion(MotionSide.Left);
    }

    public void moveBottom()
    {
        homeTetris.DoMotion(MotionSide.Bottom);
    }

    public void moveRight()
    {
        homeTetris.DoMotion(MotionSide.Right);
    }

    public void rotate()
    {
        homeTetris.DoMotion(MotionSide.Rotate);
    }
}







